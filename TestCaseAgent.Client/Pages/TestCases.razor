@page "/testcases"
@using TestCaseAgent.Client.Models
@using TestCaseAgent.Client.Services
@inject IApiService ApiService
@inject ILogger<TestCases> Logger

<PageTitle>Test Case Generator</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>Test Case Generator</h1>
            <p>Generate intelligent test cases based on your FRS document and save them to Google Sheets.</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!agentStatus.IsReady)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Setup Required</h4>
            <p>You need to link both an FRS document and a Test Case sheet before you can generate test cases.</p>
            <ul>
                <li>FRS Document: @(agentStatus.HasFRSDocument ? "✅ Connected" : "❌ Not connected")</li>
                <li>Test Case Sheet: @(agentStatus.HasTestCaseSheet ? "✅ Connected" : "❌ Not connected")</li>
            </ul>
            <hr>
            <p class="mb-0"><a href="/documents" class="btn btn-primary">Manage Documents</a></p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Generate Test Cases from Requirements</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="generateRequest" OnSubmit="GenerateTestCases">
                            <div class="mb-3">
                                <label class="form-label">Requirement ID</label>
                                <InputText @bind-Value="generateRequest.RequirementId" class="form-control" placeholder="REQ-001" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Requirement Text</label>
                                <InputTextArea @bind-Value="generateRequest.RequirementText" class="form-control" rows="4" placeholder="Enter or paste the requirement text..." />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Priority</label>
                                <InputSelect @bind-Value="generateRequest.Priority" class="form-select">
                                    <option value="@TestCasePriority.Low">Low</option>
                                    <option value="@TestCasePriority.Medium">Medium</option>
                                    <option value="@TestCasePriority.High">High</option>
                                    <option value="@TestCasePriority.Critical">Critical</option>
                                </InputSelect>
                            </div>
                            <button type="submit" class="btn btn-success" disabled="@isGenerating">
                                @if (isGenerating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Generate Test Cases
                            </button>
                        </EditForm>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-header">
                        <h5>Create Custom Test Case</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="customRequest" OnSubmit="CreateCustomTestCase">
                            <div class="mb-3">
                                <label class="form-label">Test Case Prompt</label>
                                <InputTextArea @bind-Value="customRequest.Prompt" class="form-control" rows="3" placeholder="Describe the test scenario you want to create..." />
                                <div class="form-text">Example: "Test user login with invalid credentials"</div>
                            </div>
                            <button type="submit" class="btn btn-primary" disabled="@isCreating">
                                @if (isCreating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Create Test Case
                            </button>
                        </EditForm>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Generated Test Cases</h5>
                    </div>
                    <div class="card-body" style="max-height: 70vh; overflow-y: auto;">
                        @if (!generatedTestCases.Any())
                        {
                            <p class="text-muted">No test cases generated yet. Use the forms on the left to generate test cases.</p>
                        }
                        else
                        {
                            @foreach (var testCase in generatedTestCases.OrderByDescending(tc => tc.CreatedAt))
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <h6 class="card-title">@testCase.Title</h6>
                                        <p class="card-text"><strong>Description:</strong> @testCase.Description</p>
                                        
                                        <div class="row">
                                            <div class="col-sm-6">
                                                <small class="text-muted">
                                                    <strong>Priority:</strong> 
                                                    <span class="badge bg-@GetPriorityColor(testCase.Priority)">@testCase.Priority</span>
                                                </small>
                                            </div>
                                            <div class="col-sm-6">
                                                <small class="text-muted">
                                                    <strong>Ref:</strong> @testCase.RequirementReference
                                                </small>
                                            </div>
                                        </div>
                                        
                                        <button class="btn btn-sm btn-outline-info mt-2" @onclick="() => ToggleTestCaseDetails(testCase.Id)">
                                            @(expandedTestCases.Contains(testCase.Id) ? "Hide Details" : "Show Details")
                                        </button>
                                        
                                        @if (expandedTestCases.Contains(testCase.Id))
                                        {
                                            <div class="mt-3">
                                                <div class="mb-2">
                                                    <strong>Preconditions:</strong>
                                                    <div style="white-space: pre-wrap;" class="text-muted">@testCase.Preconditions</div>
                                                </div>
                                                <div class="mb-2">
                                                    <strong>Test Steps:</strong>
                                                    <div style="white-space: pre-wrap;" class="text-muted">@testCase.TestSteps</div>
                                                </div>
                                                <div class="mb-2">
                                                    <strong>Expected Results:</strong>
                                                    <div style="white-space: pre-wrap;" class="text-muted">@testCase.ExpectedResults</div>
                                                </div>
                                                <small class="text-muted">
                                                    Created: @testCase.CreatedAt.ToString("yyyy-MM-dd HH:mm")
                                                </small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success mt-3" role="alert">
                @successMessage
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private bool isGenerating = false;
    private bool isCreating = false;
    private AgentStatus agentStatus = new();
    private List<TestCase> generatedTestCases = new();
    private HashSet<int> expandedTestCases = new();
    private TestCaseGenerationRequest generateRequest = new() { RequirementId = "", RequirementText = "" };
    private CreateTestCaseRequest customRequest = new() { Prompt = "" };
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            agentStatus = await ApiService.GetAgentStatusAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading agent status");
            errorMessage = "Failed to load agent status";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GenerateTestCases()
    {
        try
        {
            isGenerating = true;
            errorMessage = "";
            successMessage = "";

            if (string.IsNullOrWhiteSpace(generateRequest.RequirementText) || string.IsNullOrWhiteSpace(generateRequest.RequirementId))
            {
                errorMessage = "Please provide both requirement ID and text.";
                return;
            }

            var testCases = await ApiService.GenerateTestCasesAsync(generateRequest);
            
            generatedTestCases.AddRange(testCases);
            successMessage = $"Generated {testCases.Count} test cases and added them to your Google Sheet.";
            
            // Reset form
            generateRequest = new() { RequirementId = "", RequirementText = "" };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating test cases");
            errorMessage = $"Failed to generate test cases: {ex.Message}";
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task CreateCustomTestCase()
    {
        try
        {
            isCreating = true;
            errorMessage = "";
            successMessage = "";

            if (string.IsNullOrWhiteSpace(customRequest.Prompt))
            {
                errorMessage = "Please provide a test case prompt.";
                return;
            }

            var testCase = await ApiService.CreateTestCaseAsync(customRequest);
            
            generatedTestCases.Insert(0, testCase);
            successMessage = "Custom test case created and added to your Google Sheet.";
            
            // Reset form
            customRequest = new() { Prompt = "" };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating custom test case");
            errorMessage = $"Failed to create test case: {ex.Message}";
        }
        finally
        {
            isCreating = false;
        }
    }

    private void ToggleTestCaseDetails(int testCaseId)
    {
        if (expandedTestCases.Contains(testCaseId))
        {
            expandedTestCases.Remove(testCaseId);
        }
        else
        {
            expandedTestCases.Add(testCaseId);
        }
    }

    private string GetPriorityColor(TestCasePriority priority)
    {
        return priority switch
        {
            TestCasePriority.Critical => "danger",
            TestCasePriority.High => "warning",
            TestCasePriority.Medium => "primary",
            TestCasePriority.Low => "secondary",
            _ => "secondary"
        };
    }
}