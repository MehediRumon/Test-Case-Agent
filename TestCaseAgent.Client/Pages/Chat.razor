@page "/chat"
@using TestCaseAgent.Client.Models
@using TestCaseAgent.Client.Services
@inject IApiService ApiService
@inject ILogger<Chat> Logger

<PageTitle>AI Chat</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>AI Chat Assistant</h1>
            <p>Ask questions about your FRS document and get intelligent responses.</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!agentStatus.HasFRSDocument)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">FRS Document Required</h4>
            <p>You need to link a Google Docs containing your Functional Requirements Specification before you can use the chat feature.</p>
            <hr>
            <p class="mb-0"><a href="/documents" class="btn btn-primary">Link FRS Document</a></p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="card" style="height: 70vh;">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-robot"></i> Chat with AI Assistant
                            <small class="text-muted">- Connected to: @agentStatus.FRSDocumentTitle</small>
                        </h5>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <div class="flex-grow-1 overflow-auto mb-3" style="max-height: calc(70vh - 200px);" @ref="chatContainer">
                            @if (!chatHistory.Any())
                            {
                                <div class="text-center text-muted mt-5">
                                    <i class="bi bi-chat-dots display-1"></i>
                                    <p class="mt-3">Start a conversation by asking a question about your FRS document.</p>
                                    <div class="mt-4">
                                        <h6>Example questions:</h6>
                                        <ul class="list-unstyled">
                                            <li><button class="btn btn-link" @onclick='() => SetQuestion("What are the main functional requirements?")'>What are the main functional requirements?</button></li>
                                            <li><button class="btn btn-link" @onclick='() => SetQuestion("What are the user authentication requirements?")'>What are the user authentication requirements?</button></li>
                                            <li><button class="btn btn-link" @onclick='() => SetQuestion("What are the system constraints?")'>What are the system constraints?</button></li>
                                        </ul>
                                    </div>
                                </div>
                            }
                            else
                            {
                                @foreach (var message in chatHistory)
                                {
                                    <div class="mb-3">
                                        @if (message.IsUser)
                                        {
                                            <div class="d-flex justify-content-end">
                                                <div class="bg-primary text-white rounded p-3" style="max-width: 70%;">
                                                    <strong>You:</strong><br>
                                                    @message.Content
                                                    <br><small class="opacity-75">@message.Timestamp.ToString("HH:mm")</small>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex justify-content-start">
                                                <div class="bg-light rounded p-3" style="max-width: 70%;">
                                                    <strong><i class="bi bi-robot"></i> AI Assistant:</strong><br>
                                                    <div style="white-space: pre-wrap;">@message.Content</div>
                                                    @if (message.References?.Any() == true)
                                                    {
                                                        <hr class="my-2">
                                                        <small class="text-muted">
                                                            <strong>References:</strong><br>
                                                            @foreach (var reference in message.References)
                                                            {
                                                                <div>• @reference</div>
                                                            }
                                                        </small>
                                                    }
                                                    <br><small class="text-muted">@message.Timestamp.ToString("HH:mm")</small>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            
                            @if (isProcessing)
                            {
                                <div class="d-flex justify-content-start mb-3">
                                    <div class="bg-light rounded p-3">
                                        <strong><i class="bi bi-robot"></i> AI Assistant:</strong><br>
                                        <div class="spinner-border spinner-border-sm me-2"></div>
                                        Thinking...
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <div class="border-top pt-3">
                            <EditForm Model="currentQuestion" OnSubmit="SendMessage">
                                <div class="input-group">
                                    <InputText @bind-Value="currentQuestion.Question" class="form-control" placeholder="Ask a question about your FRS document..." disabled="@isProcessing" @onkeypress="HandleKeyPress" />
                                    <button class="btn btn-primary" type="submit" disabled="@(isProcessing || string.IsNullOrWhiteSpace(currentQuestion.Question))">
                                        @if (isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm"></span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-send"></i>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private bool isProcessing = false;
    private AgentStatus agentStatus = new();
    private List<ChatMessage> chatHistory = new();
    private AgentQuery currentQuestion = new() { Question = "" };
    private string errorMessage = "";
    private ElementReference chatContainer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            agentStatus = await ApiService.GetAgentStatusAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading agent status");
            errorMessage = "Failed to load agent status";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentQuestion.Question) || isProcessing)
            return;

        try
        {
            isProcessing = true;
            errorMessage = "";

            // Add user message to chat
            var userMessage = new ChatMessage
            {
                Content = currentQuestion.Question,
                IsUser = true,
                Timestamp = DateTime.Now
            };
            chatHistory.Add(userMessage);

            var questionText = currentQuestion.Question;
            currentQuestion.Question = "";

            StateHasChanged();
            await ScrollToBottom();

            // Get AI response
            var response = await ApiService.AskQuestionAsync(new AgentQuery { Question = questionText });

            // Add AI response to chat
            var aiMessage = new ChatMessage
            {
                Content = response.Answer,
                IsUser = false,
                Timestamp = DateTime.Now,
                References = response.References
            };
            chatHistory.Add(aiMessage);

            StateHasChanged();
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending message");
            errorMessage = $"Failed to get response: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void SetQuestion(string question)
    {
        currentQuestion.Question = question;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100); // Small delay to ensure content is rendered
        await chatContainer.FocusAsync();
    }

    private class ChatMessage
    {
        public required string Content { get; set; }
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
        public List<string>? References { get; set; }
    }
}